<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.sonatype.oss</groupId>
    <artifactId>oss-parent</artifactId>
    <version>7</version>
  </parent>
	<groupId>org.docx4j</groupId>
	<artifactId>docx4j</artifactId>
	<version>3.0.0-SNAPSHOT</version>
	<packaging>jar</packaging>
	<name>docx4j</name>
	<description>
		docx4j is a library which helps you to work with the Office Open
		XML file format as used in docx
		documents, pptx presentations, and xlsx spreadsheets.
	</description>
	<url>http://www.docx4java.org/</url>
	<licenses>
	  <license>
	    <name>Apache 2</name>
	    <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
	    <distribution>repo</distribution>
	    <comments>A business-friendly OSS license</comments>
	  </license>
  	</licenses>
	<scm>
	    <developerConnection>scm:git|git@github.com:plutext/docx4j.git</developerConnection>
    </scm>
	<inceptionYear>2007</inceptionYear>
	<developers>
		<developer>
			<id>jharrop</id>
			<name>Jason Harrop</name>
			<email>jason@plutext.org</email>
			<organization>Plutext</organization>
			<roles>
				<role>Developer</role>
			</roles>
			<timezone>+10</timezone>
		</developer>
	</developers>
	<contributors>
		<contributor>
			<name>Adam Schmideg</name>
		</contributor>
		<contributor>
			<name>Albert Aymerich</name>
		</contributor>
		<contributor>
			<name>alberto</name>
		</contributor>
		<contributor>
			<name>amdonov</name>
		</contributor>
		<contributor>
			<name>Antoine</name>
		</contributor>
		<contributor>
			<name>Arnaud Kleinpeter</name>
		</contributor>
		<contributor>
			<name>azeloro</name>
		</contributor>
		<contributor>
			<name>Dave Brown</name>
		</contributor>
		<contributor>
			<name>Holger Schlegel</name>
		</contributor>
		<contributor>
			<name>Jeromy Evans</name>
		</contributor>
		<contributor>
			<name>Jojada Tirtowidjojo</name>
		</contributor>
		<contributor>
			<name>Leigh</name>
		</contributor>
		<contributor>
			<name>Manimala Kumar</name>
		</contributor>
		<contributor>
			<name>Marcel</name>
		</contributor>
		<contributor>
			<name>Patrick Linskey</name>
		</contributor>
		<contributor>
			<name>Pierre</name>
		</contributor>
		<contributor>
			<name>ppa_waw</name>
		</contributor>
		<contributor>
			<name>Richard</name>
		</contributor>
		<contributor>
			<name>Serge Grachov</name>
		</contributor>
		<contributor>
			<name>Tinne</name>
		</contributor>
		<contributor>
			<name>y.rolland</name>
		</contributor>
		<contributor>
			<name>denys.zhosan</name>
		</contributor>
	</contributors>
	<build>
		<sourceDirectory>src/main/java</sourceDirectory>
		<testSourceDirectory>src/test/java</testSourceDirectory>
		<outputDirectory>bin</outputDirectory>
		<testOutputDirectory>bin</testOutputDirectory>
		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>1.3</version>
				<executions>
					<execution>
						<id>add-source</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>src/pptx4j/java</source>
								<source>src/xlsx4j/java</source>
								<source>src/glox4j/java</source>
								<source>src/diffx</source>
								<!-- <source>src/xslfo</source> -->
								<!-- <source>src/svg</source> -->
								<!--source>src/sun</source -->
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<!-- The objective is to generate a jar which is compatible with Java
						1.5, whilst at the same time allowing @Override annotations in the source
						code on methods which merely implement an interface (Java 6 allows this,
						but 1.5 gives an error). When I played around with this, I found that both
						maven and ant would happily compile to target 1.5 with the pesky @Override
						annotations present (irrespective of whether source was set to 1.5 or 1.6).
						You are not allowed source=1.6, target=1.5; this results in: Failure executing
						javac, but could not parse the error javac: source release 1.6 requires target
						release 1.6 So we need source=1.5, target=1.5 The downside is that m2eclipse
						mirrors this in Eclipse's compiler settings, and Eclipse then complains about
						the @Override annotations :-( So you must manually change the Eclipse compiler
						setting back to 1.6. -->
					<source>1.5</source>
					<target>1.5</target>

					<verbose>false</verbose>
					<!-- maxmemory>512m</maxmemory On Linux, use: MAVEN_OPTS="-Xmx512m" mvn install -->
					<!-- try to help maven to find package com.sun.xml.internal.bind.marshaller:
						<bootclasspath>${java.home}/lib/rt.jar</bootclasspath> but this doesn't help -->
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<!-- The Surefire Plugin is used during the test phase of the build lifecycle
					to execute the unit tests of an application -->
				<version>2.6</version>
				<configuration>
					<excludes>
						<exclude>**/samples/*.java</exclude>
						<exclude>**/AbstractNumberingTest.java</exclude>
					</excludes>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.3.1</version>
				<configuration>
					<excludes>
						<exclude>**/*.docx</exclude><!-- docx files in /src/test/resources
							add unwanted 1 MB to jar. -->
						<exclude>src/test/resources/**</exclude>
						<!-- TODO this still leaves some ugly directories in our jar. Anyone
							know how to leave out all files and directories in src/test/resources? -->
					</excludes>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-source-plugin</artifactId>
				<!-- The Source Plugin creates a jar archive of the source files of the
					current project. -->
				<version>2.1.2</version>
				<executions>
					<execution>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- maven-javadoc-plugin seems to require large -Xmx so comment this
				out if your build is failing because you don't have enough. -->
			<plugin>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.8</version>
				<configuration>
					<maxmemory>512m</maxmemory>
					<!-- 18 MB without the exclusion; still 15MB with -->
					<!-- <excludePackageNames>org.plutext.jaxb.svg11:org.plutext.jaxb.xslfo</excludePackageNames> -->
				</configuration>
				<executions>
					<execution>
						<id>attach-javadocs</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>com.soebes.maven.plugins</groupId>
				<artifactId>maven-echo-plugin</artifactId>
				<version>0.1</version>
				<executions>
					<execution>
						<id>install-echo</id>
						<phase>install</phase>
						<goals>
							<goal>echo</goal>
						</goals>
					</execution>
					<execution>
						<id>deploy-echo</id>
						<phase>deploy</phase>
						<goals>
							<goal>echo</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<echos>
						<echo>+-------------------------------------------------------+</echo>
						<echo>!       Join the docx4j developers mailing list by      !</echo>
						<echo>!       emailing docx4j-dev-subscribe@docx4java.org     !</echo>
						<echo>+-------------------------------------------------------+</echo>
					</echos>
				</configuration>
			</plugin>
		</plugins>
    	<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.codehaus.mojo</groupId>
										<artifactId>build-helper-maven-plugin</artifactId>
										<versionRange>[1.3,2.0)</versionRange>
										<goals>
											<goal>add-source</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute>
											<runOnIncremental>true</runOnIncremental>
										</execute>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>		
		<resources>
			<!-- be sure to get xml,xlst resources in various src trees -->
			<resource>
				<directory>src/main/java</directory>
				<includes>
					<include>**/*.xslt</include>
					<include>**/*.xml</include>
					<include>**/jaxb.properties</include>
				</includes>
			</resource>
			<resource>
				<directory>src/pptx4j/java</directory>
				<includes>
					<include>**/*.xslt</include>
					<include>**/*.xml</include>
					<include>**/jaxb.properties</include>
				</includes>
			</resource>
			<resource>
				<directory>src/xlsx4j/java</directory>
				<includes>
					<include>**/jaxb.properties</include>
				</includes>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
				<includes>
					<include>docx4j.properties</include>
					<include>XhtmlNamespaceHandler.css</include>
					<include>xhtmlrenderer.conf</include>
				</includes>
			</resource>
			<!-- <resource> <directory>src/test/resources</directory> <excludes> <exclude>*.docx</exclude>
				</excludes> </resource> -->
		</resources>
	</build>
	<reporting>
		<plugins>
			<plugin>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.8</version>
				<reportSets>
					<reportSet>
						<id>standard-javadoc</id>
						<inherited>true</inherited>
						<configuration>
							<description>
								docx4j Open XML manipulation library
							</description>
							<docfilessubdirs>true</docfilessubdirs>
							<failOnError>false</failOnError>
							<locale>en_AU</locale>
							<name>Javadoc report</name>
							<quiet>true</quiet>
							<serialwarn>false</serialwarn>
							<show>private</show>
							<source>1.6</source>
							<stylesheet>maven</stylesheet>
							<version>true</version>
						</configuration>
						<reports>
							<report>javadoc</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>
		</plugins>
	</reporting>
	<dependencies>

	
	<!-- 
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>4.2.2</version>
		</dependency>
	 -->



		<!--  To use MOXy, uncomment this and the EclipseLink repo, and run ant JAXB-use-MOXy

		      Please note that we are waiting for 2.4.2 to hit Maven, since 2.4.1 has
		      some issues.

		      See further http://www.docx4java.org/forums/docx-java-f6/moxy-t1242.html

		<dependency>
			<groupId>org.eclipse.persistence</groupId>
			<artifactId>org.eclipse.persistence.moxy</artifactId>
			<version>2.4.1</version>
		</dependency>
		-->
		<dependency>
		  <groupId>javax.mail</groupId>
		  <artifactId>mail</artifactId>
		  <version>1.4</version>
		</dependency>

		  <!--  Uncomment this if you are using Java 5.

		  		StAX reference implementation,
		        required for MLInputFactory.newInstance() in Differencer
		        iff you are using Java 1.5
		        (not necessary for Java 6)
		        -->
			        <!--
   			<dependency>
			  <groupId>stax</groupId>
			  <artifactId>stax</artifactId>
			  <version>1.2.0</version>
				<exclusions>
					<exclusion>
					<groupId>stax</groupId>
					<artifactId>stax-api</artifactId>
					</exclusion>
				</exclusions>
   			</dependency>  -->
			<!--  stax 1.2.0 grabs 1.0.1(!); jaxb would grab 1.0.2 (where from?) -->

<!-- Uncomment this for Java 5
   			<dependency>
   				<groupId>javax.xml.bind</groupId>
   				<artifactId>jaxb-api</artifactId>
   				<version>2.1</version>
   			</dependency>
   			<dependency>
   				<groupId>com.sun.xml.bind</groupId>
   				<artifactId>jaxb-impl</artifactId>
   				<version>2.1.3</version>

   			</dependency>
  -->

   			<!--  nothing newer in the repository! -->


<!-- 		<dependency>
			<groupId>org.plutext.jaxb</groupId>
			<artifactId>svg</artifactId>
			<version>1.0.0-SNAPSHOT</version>
		</dependency>
		<dependency>
			<groupId>org.plutext.jaxb</groupId>
			<artifactId>xslfo</artifactId>
			<version>1.0.0-SNAPSHOT</version>
		</dependency>
 -->

		<!--  New for docx4j 2.8.0 -->
		<dependency>
			<groupId>org.docx4j</groupId>
			<artifactId>xhtmlrenderer</artifactId><!--  supports xhtml import -->
			<version>1.0.0</version>
			<!-- currently itext is required (fonts for width calculations)
				<exclusions>
					<exclusion>
						<groupId>com.lowagie</groupId>
						<artifactId>itext</artifactId>
					</exclusion>
				</exclusions>
				 -->
		</dependency>
		<dependency>
			<groupId>org.plutext</groupId>
			<artifactId>jaxb-svg11</artifactId><!-- previously part of docx4j source -->
			<version>1.0.2</version>
		</dependency>
		<dependency>
			<groupId>org.plutext</groupId>
			<artifactId>jaxb-xslfo</artifactId><!-- previously part of docx4j source -->
			<version>1.0.1</version>
		</dependency>
		<dependency>
			<groupId>org.plutext</groupId>
			<artifactId>jaxb-xmldsig-core</artifactId>
			<version>1.0.0</version>
		</dependency>

		<dependency>
			<groupId>com.lowagie</groupId>
			<artifactId>itext</artifactId>
			<version>2.1.7</version>
			<scope>test</scope>
		</dependency>

		<!--  End of new 2.8.0 new dependencies -->

		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.15</version>
				<exclusions>
					<exclusion>
						<groupId>javax.mail</groupId>
						<artifactId>mail</artifactId>
					</exclusion>
					<exclusion>
						<groupId>javax.jms</groupId>
						<artifactId>jms</artifactId>
					</exclusion>
					<exclusion>
						<groupId>com.sun.jdmk</groupId>
						<artifactId>jmxtools</artifactId>
					</exclusion>
					<exclusion>
						<groupId>com.sun.jmx</groupId>
						<artifactId>jmxri</artifactId>
					</exclusion>
				</exclusions>
		</dependency>
		<dependency>
			<!--  required for our diffx -->
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
			<version>2.4</version>
		</dependency>
		<dependency>
			<!-- required for fop, xmlgraphics-commons;
			     list it explicitly, so dependencies can be excluded. -->
			<groupId>commons-logging</groupId>
			<artifactId>commons-logging</artifactId>
			<version>1.1.1</version>
			<!-- These are required for commons-logging 1.1, otherwise these unwanted dependencies are included.
				See http://raibledesigns.com/rd/entry/maven_2_hates_commons_logging

				<exclusions>
				<exclusion>
				<groupId>log4j</groupId>
				<artifactId>log4j</artifactId>
				</exclusion>
				<exclusion>
				<groupId>logkit</groupId>
				<artifactId>logkit</artifactId>
				</exclusion>
				<exclusion>
				<groupId>avalon-framework</groupId>
				<artifactId>avalon-framework</artifactId>
				</exclusion>
				<exclusion>
				<groupId>javax.servlet</groupId>
				<artifactId>servlet-api</artifactId>
				</exclusion>
				</exclusions> -->
		</dependency>
		<dependency>
			<!--  required for ole introspection -->
			<groupId>commons-codec</groupId>
			<artifactId>commons-codec</artifactId>
			<version>1.3</version>
		</dependency>


		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>1.3.1</version>
		</dependency>

<!-- To use a version of FOP more recent than 1.1
     (eg built from source), comment out  
     xmlgraphics-commons:1.5 and fop below,
     and add the following classes to your
     class path:
     
           http://svn.apache.org/viewvc/xmlgraphics/fop/trunk/lib/batik-all-1.7.jar
           (there is probably something in maven
     
     	   http://svn.apache.org/viewvc/xmlgraphics/fop/trunk/lib/xmlgraphics-commons-svn-trunk.jar
     	-->   
     	   
      


	<dependency>
		<groupId>org.apache.xmlgraphics</groupId>
		<artifactId>xmlgraphics-commons</artifactId>
		<version>1.5</version>
	</dependency>
	<dependency>
		<groupId>org.apache.xmlgraphics</groupId>
		<artifactId>fop</artifactId>
		<version>1.1</version>
		<exclusions>
			<exclusion>
				<artifactId>avalon-framework-api</artifactId>
				<groupId>org.apache.avalon.framework</groupId>
			</exclusion>
			<exclusion>
				<artifactId>avalon-framework-impl</artifactId>
				<groupId>org.apache.avalon.framework</groupId>
			</exclusion>
			<exclusion>
				<groupId>xml-apis</groupId>
				<artifactId>xml-apis</artifactId>
			</exclusion>
			<exclusion>
				<groupId>xml-apis</groupId>
				<artifactId>xml-apis-ext</artifactId>
			</exclusion>
		</exclusions>
	</dependency>

	<!-- these two are to correct issues in fop dependency -->
	<dependency>
		<groupId>org.apache.avalon.framework</groupId>
		<artifactId>avalon-framework-api</artifactId>
		<version>4.3.1</version>
	</dependency>
	<dependency>
		<groupId>org.apache.avalon.framework</groupId>
		<artifactId>avalon-framework-impl</artifactId>
		<version>4.3.1</version>
	</dependency>
	<dependency>
		<groupId>xalan</groupId>
		<artifactId>xalan</artifactId>
		<version>2.7.1</version>
		<exclusions>
			<exclusion>
				<groupId>xml-apis</groupId>
				<artifactId>xml-apis</artifactId>
			</exclusion>
		</exclusions>
	</dependency>

<!-- These work for basic marshalling/unmarshalling,
     but not with our XSLT extension functions.
<dependency>
    <groupId>net.sf.saxon</groupId>
    <artifactId>saxon</artifactId>
    <version>8.7</version>
</dependency>
<dependency>
    <groupId>net.sf.saxon</groupId>
    <artifactId>saxon-dom</artifactId>
    <version>8.7</version>
</dependency>
-->

<dependency>
    <groupId>net.arnx</groupId>
    <artifactId>wmf2svg</artifactId>
    <version>0.9.0</version>
</dependency>

		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-scratchpad</artifactId>
			<version>3.8</version>
		</dependency>

		<!-- Ensure both the Java 6 and RI interfaces are present,
		     even if the user has just one.
		     NB: this (or an added source location containing them) is
		     necessary (at least for Maven 2.2.1) since without this,
		     Maven doesn't find the Java 6 copy in rt.jar -->
		<dependency>
		    <groupId>com.googlecode.jaxb-namespaceprefixmapper-interfaces</groupId>
		    <artifactId>JAXBNamespacePrefixMapper</artifactId>
		    <version>2.2.4</version>
   			<!-- http://dev.plutext.org/forums/docx-java-f6/dependency-management-improvements-t739.html -->
   			<scope>provided</scope>
   		</dependency>

		<dependency>
    		<groupId>org.antlr</groupId>
    		<artifactId>antlr-runtime</artifactId>
    		<version>3.3</version>
		</dependency>
		<dependency>
		    <groupId>org.antlr</groupId>
		    <artifactId>stringtemplate</artifactId>
		    <version>3.2.1</version>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.8</version>
			<scope>test</scope>
		</dependency>

<!-- Uncomment for load/save via JCR, which
		may be found in docx4j-extras.
		<dependency>
			<groupId>javax.jcr</groupId>
			<artifactId>jcr</artifactId>
			<version>1.0</version>
		</dependency>
		-->


<!--	Uncomment for the PDF conversion via HTML or iText, which
		may be found in docx4j-extras.

		If you are planning to use that, you'll also want to uncomment
		the BaseFont stuff in PhysicalFonts.

 		<dependency>
			<groupId>com.lowagie</groupId>
			<artifactId>itext-unsigned</artifactId>
			<version>2.0.8</version>
			<exclusions>
				<exclusion>
					<artifactId>bouncycastle</artifactId>
					<groupId>bcmail-jdk14</groupId>
				</exclusion>
				<exclusion>
					<artifactId>bouncycastle</artifactId>
					<groupId>bcprov-jdk14</groupId>
				</exclusion>
			</exclusions>
		</dependency>
	-->


<!-- Uncomment for the PDF conversion via HTML, which
		may be found in docx4j-extras.

		<dependency>
			<groupId>pdf-renderer</groupId>
			<artifactId>pdf-renderer</artifactId>
			<version>0.2009.0324</version>
		</dependency>
		<dependency>
			<groupId>xhtmlrenderer</groupId>
			<artifactId>minium</artifactId>
			<version>0.1</version>
		</dependency>

		<dependency>
			<groupId>xhtmlrenderer</groupId>
			<artifactId>core-renderer</artifactId>
			<version>R8pre2</version>
		</dependency>
 -->



		<!-- if you want to use the vfs stuff in docx4j-extras, you'll need commons-vfs
		     (one of the two versions below), and jdom.

 			 required by commons-vfs;
			 TODO that POM should declare this.
			<dependency>
				<groupId>jdom</groupId>
				<artifactId>jdom</artifactId>
				<version>1.0</version>
			</dependency>

			<dependency>
			    <groupId>commons-vfs</groupId>
			    <artifactId>commons-vfs</artifactId>
			    <version>1.0</version>
			</dependency>

			This patched version of VFS is required for WebDAV

		     In the meantime, this may be found in
		     https://webdavclient4j.svn.sourceforge.net/svnroot/webdavclient4j/trunk/m2/org/apache/commons/commons-vfs-patched/

			<dependency>
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-vfs-patched</artifactId>
				<version>1.9.1</version>
			</dependency>
		-->


  		<!-- svn:http://dev.plutext.org/svn/docx4j/trunk/docx4j/m2

			(stuff not available in public repositories)

			mvn deploy:deploy-file -f wagon-svn-pom.xml -Dfile=dist/docx4j.jar -DpomFile=pom.xml  -Dpackaging=jar -DrepositoryId=docx4j -Durl=svn:http://dev.plutext.org/svn/docx4j/trunk/docx4j/m2

		-->

	</dependencies>

<repositories>
  <repository>
    <id>EclipseLink Repo</id>
    <url>http://www.eclipse.org/downloads/download.php?r=1&amp;nf=1&amp;file=/rt/eclipselink/maven.repo</url>
  </repository>
</repositories>
    <!-- note that ampersands in this URL are escaped because this is in an xml file -
            un-escape them to use in browser
     -->

	<profiles> <!--  use -P eg mvn -Psign-artifacts  -->
		<profile>
			<id>sign-artifacts</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-gpg-plugin</artifactId>
						<version>1.4</version>
						<executions>
							<execution>
								<id>sign-artifacts</id>
								<phase>verify</phase>
								<goals>
									<goal>sign</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

   		<!--  comment this out, until the Windows path issues below are fixed in m2eclipse
   	<profile>
   		<id>jdk15</id>
   		<activation>
   			<jdk>1.5</jdk>
   		</activation>
   		<dependencies>
   			<dependency>
   				<groupId>javax.xml.bind</groupId>
   				<artifactId>jaxb-api</artifactId>
   				<version>2.1</version>
   			</dependency>

   			<dependency>
   				<groupId>com.sun.xml.bind</groupId>
   				<artifactId>jaxb-impl</artifactId>
   				<version>2.1.3</version>
   			</dependency>
   		</dependencies>
   	</profile>
   	<profile>
   		<id>jdk16</id>
   		<activation>
   			<jdk>1.6</jdk>
   		</activation>
   		<dependencies>
   			<dependency>
   				<groupId>com.sun.xml.bind</groupId>
   				<artifactId>jaxb-impl</artifactId>
   				<version>2.0</version>
   				<scope>system</scope>
                <systemPath>${env.JAVA_HOME}/jre/lib/rt.jar</systemPath>
   			</dependency>
   		</dependencies>
   	</profile>
   				-->
   </profiles>

   				<!--
                <systemPath>
                    /usr/lib/jvm/java-6-sun/jre/lib/rt.jar
                </systemPath>
   					Note for Windows users: Maven won't find rt.jar if systemPath
   					contains a space (eg "Program Files"). Either copy rt.jar
   					to a path that doesn't contain spaces, or use:

   					    <systemPath>${env.JAVA_HOME}/jre/lib/rt.jar</systemPath>

   					which works on the command line, but not in m2eclipse 0.9.x.
   					See http://jira.codehaus.org/browse/MNGECLIPSE-581

   					<systemPath>${java.home}/lib/rt.jar</systemPath>
   					broken (mvn 2.0.9) even though java.home is supposed to point to JRE_HOME:

   				-->

</project>
